{"rating":{"max":10,"numRaters":16,"average":"8.8","min":0},"subtitle":"101条规则、准则与最佳实践","author":["Herb Sutter","Andrei Alexandrescu"],"pubdate":"2016-3-1","tags":[{"count":16,"name":"C++","title":"C++"},{"count":5,"name":"C\/C++","title":"C\/C++"},{"count":3,"name":"计算机","title":"计算机"},{"count":3,"name":"编程语言","title":"编程语言"},{"count":3,"name":"编程","title":"编程"},{"count":2,"name":"软件开发","title":"软件开发"},{"count":1,"name":"计算机科学","title":"计算机科学"},{"count":1,"name":"已卖","title":"已卖"}],"origin_title":"C++ Coding Standards: 101 Rules, Guidelines, and Best Practices","image":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29114822.jpg","binding":"平装","translator":["刘基诚"],"catalog":"组织和策略问题1\n第0条不要拘泥于小节(又名：了解哪些东西不应该标准化)2\n第1条在高警告级别干净利落地进行编译4\n第2条使用自动构建系统7\n第3条使用版本控制系统8\n第4条做代码审查9设计风格11\n第5条一个实体应该只有一个紧凑的职责12\n第6条正确、简单和清晰xx13\n第7条编程中应知道何时和如何考虑可伸缩性14\n第8条不要进行不成熟的优化16\n第9条不要进行不成熟的劣化18\n第10条尽量减少全局和共享数据19\n第11条隐藏信息20\n第12条懂得何时和如何进行并发性编程21\n第13条确保资源为对象所拥有。使用显式的RAII和智能指针24\n编程风格27\n第14条宁要编译时和连接时错误，也不要运行时错误28\n第15条积极使用const30\n第16条避免使用宏32\n第17条避免使用“魔数”34\n第18条尽可能局部地声明变量35\n第19条总是初始化变量36\n第20条避免函数过长，避免嵌套过深38\n第21条避免跨编译单元的初始化依赖39\n第22条尽量减少定义性依赖。避免循环依赖40\n第23条头文件应该自给自足42\n第24条总是编写内部#include保护符，决不要编写外部#include保护符43\n函数与操作符45\n第25条正确地选择通过值、(智能)指针或者引用传递参数46\n第26条保持重载操作符的自然语义47\n第27条优先使用算术操作符和赋值操作符的标准形式48\n第28条优先使用++和--的标准形式。优先调用前缀形式50\n第29条考虑重载以避免隐含类型转换51\n第30条避免重载&amp;&amp;、||或,(逗号)52\n第31条不要编写依赖于函数参数求值顺序的代码54\n类的设计与继承55\n第32条弄清所要编写的是哪种类56\n第33条用小类代替巨类57\n第34条用组合代替继承58\n第35条避免从并非要设计成基类的类中继承60\n第36条优先提供抽象接口62\n第37条公用继承即可替换性。继承，不是为了重用，而是为了被重用64\n第38条实施安全的覆盖66\n第39条考虑将虚拟函数声明为非公用的，将公用函数声明为非虚拟的68\n第40条要避免提供隐式转换70\n第41条将数据成员设为私有的，无行为的聚集(C语言形式的struct)除外72\n第42条不要公开内部数据74\n第43条明智地使用Pimpl76\n第44条优先编写非成员非友元函数79\n第45条总是一起提供new和delete80\n第46条如果提供类专门的new，应该提供所有标准形式(普通、就地和不抛出)82\n构造、析构与复制85\n第47条以同样的顺序定义和初始化成员变量86\n第48条在构造函数中用初始化代替赋值87\n第49条避免在构造函数和析构函数中调用虚拟函数88\n第50条将基类析构函数设为公用且虚拟的，或者保护且非虚拟的90\n第51条析构函数、释放和交换xx不能失败92\n第52条一致地进行复制和销毁94\n第53条显式地启用或者x止复制95\n第54条避免切片。在基类中考虑用克隆代替复制96\n第55条使用赋值的标准形式99\n第56条只要可行，就提供不会失败的swap(而且要正确地提供)100\n名字空间与模块103\n第57条将类型及其非成员函数接口置于同一名字空间中104\n第58条应该将类型和函数分别置于不同的名字空间中，除非有意想让它们一起工作106\n第59条不要在头文件中或者#include之前编写名字空间using108\n第60条要避免在不同的模块中分配和释放内存111\n第61条不要在头文件中定义具有链接的实体112\n第62条不要允许异常跨越模块边界传播114\n第63条在模块的接口中使用具有良好可移植性的类型116\n模板与泛型119\n第64条理智地结合静态多态性和动态多态性120\n第65条有意地进行显式自定义122\n第66条不要特化函数模板126\n第67条不要无意地编写不通用的代码128\n错误处理与异常129\n第68条广泛地使用断言记录内部假设和不变式130\n第69条建立合理的错误处理策略，并严格遵守132\n第70条区别错误与非错误134\n第71条设计和编写错误安全代码137\n第72条优先使用异常报告错误140\n第73条通过值抛出，通过引用捕获144\n第74条正确地报告、处理和转换错误145\n第75条避免使用异常规范146\nSTL：容器149\n第76条默认时使用vector。否则，选择其他合适的容器150\n第77条用vector和string代替数组152\n第78条使用vector(和string::c_str)与非C++API交换数据153\n第79条在容器中只存储值和智能指针154\n第80条用push_back代替其他扩展序列的方式155\n第81条多用范围操作，少用单元素操作156\n第82条使用xx的惯用法真正地压缩容量，真正地删除元素157\nSTL：算法159\n第83条使用带检查的STL实现160\n第84条用算法调用代替手工编写的循环162\n第85条使用正确的STL查找算法165\n第86条使用正确的STL排序算法166\n第87条使谓词成为纯函数168\n第88条算法和比较器的参数应多用函数对象少用函数170\n第89条正确编写函数对象172\n类型安全173\n第90条避免使用类型分支，多使用多态174\n第91条依赖类型，而非其表示方式176\n第92条避免使用reinterpret_cast177\n第93条避免对指针使用static_cast178\n第94条避免强制转换const179\n第95条不要使用C风格的强制转换180\n第96条不要对非POD进行memcpy操作或者memcmp操作182\n第97条不要使用联合重新解释表示方式183\n第98条不要使用可变长参数(...)184\n第99条不要使用失效对象。不要使用不安全函数185\n第100条不要多态地处理数组186\n参考文献187\n摘要汇总193\n索引205","pages":"216","images":{"small":"https://img3.doubanio.com\/view\/subject\/s\/public\/s29114822.jpg","large":"https://img3.doubanio.com\/view\/subject\/l\/public\/s29114822.jpg","medium":"https://img3.doubanio.com\/view\/subject\/m\/public\/s29114822.jpg"},"alt":"https:\/\/book.douban.com\/subject\/26899830\/","id":"26899830","publisher":"人民邮电出版社","isbn10":"711535135X","isbn13":"9787115351357","title":"C++编程规范","url":"https:\/\/api.douban.com\/v2\/book\/26899830","alt_title":"C++ Coding Standards: 101 Rules, Guidelines, and Best Practices","author_intro":"Herb Sutter是ISO C++标准委员会主席，《C++ Users Journal》杂志特邀编辑和专栏作家。他目前在微软公司领导.NET环境下C++语言扩展的设计工作。\nAndrei Alexandrescu是C++专家，《C++ Users Journal》杂志的专栏作家，他的《Modern C++ Design》一书曾荣获2001年C++图书称号。","summary":"在《C++编程规范：101条规则、准则与实践》中，两位知名的C++专家将全球C++界20年的集体智慧和经验凝结成一套编程规范。这些规范可以作为每一个开发团队制定实际开发规范的基础，更是每一位C++程序员应该遵循的行事准则。书中对每一条规范都给出了描述，并辅以实例说明；从类型定义到错误处理，都给出了C++实践，即使使用C++多年的程序员也会从本书中受益匪浅。\n《C++编程规范：101条规则、准则与实践》适合于各层次C++程序员使用，也可作为高等院校C++课程的教学参考书。","series":{"id":"23545","title":"C和C++实务精选"},"price":"39.00元"}